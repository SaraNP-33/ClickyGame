{"version":3,"sources":["title.png","components/Container/index.js","components/Wrapper/index.js","components/ScrubsCards/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","props","className","fluid","Wrapper","children","ScrubsCards","onClick","click","data-id","id","alt","name","key","src","image","Jumbotron","App","state","scrubs","score","topScore","clicked","clickCard","event","cardShuffle","target","getAttribute","console","log","includes","alert","setState","copy","push","length","scrubs2","sort","a","b","Math","random","this","title","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uzBAAAA,EAAOC,QAAU,IAA0B,mC,kOCI5BC,MAHf,SAAmBC,GACjB,OAAO,uCAAKC,UAAS,mBAAcD,EAAME,MAAQ,SAAW,KAAUF,K,MCKzDG,MAJf,SAAiBH,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMI,W,MCS1BC,MAVf,SAAqBL,GACjB,OACI,yBAAKC,UAAU,OAAQK,QAASN,EAAMO,OAClC,yBAAKN,UAAU,iBACX,yBAAMO,UAASR,EAAMS,GAAIC,IAAKV,EAAMW,KAAMC,KAAG,EAACC,IAAKb,EAAMc,W,MCM1DC,MARf,YAA+B,IAAXX,EAAU,EAAVA,SAChB,OACA,yBAAKH,UAAU,aACVG,I,uBC6EMY,E,4MA3EbC,MAAO,CACLC,OAAOA,EACPC,MAAM,EACNC,SAAS,EACTC,QAAQ,I,EAEVC,UAAU,SAAAC,GAGR,EAAKC,cACL,IAAIf,EAAIc,EAAME,OAAOC,aAAa,WAElC,GADAC,QAAQC,IAAInB,GACT,EAAKQ,MAAMI,QAAQQ,SAASpB,GAC7BkB,QAAQC,IAAI,YACZE,MAAM,6CACN,EAAKC,SAAS,CACZV,QAAS,GACTF,MAAM,QAEL,CACH,IAAIa,EAAI,YAAO,EAAKf,MAAMI,SAC1BW,EAAKC,KAAKxB,GACS,KAAhBuB,EAAKE,QACNP,QAAQC,IAAI,YACZE,MAAM,sCAER,EAAKC,SAAS,CACZV,QAASW,EACTb,MAAO,EAAKF,MAAME,MAAM,EACxBC,SAAU,EAAKH,MAAME,MAAO,EAAE,EAAKF,MAAMG,SAAY,EAAKH,MAAMG,SAAS,EAAI,EAAKH,MAAMG,a,EAM9FI,YAAa,WACX,IAAIW,EAAQ,YAAK,EAAKlB,MAAMC,QAC5BiB,EAAQC,MAAK,SAACC,EAAEC,GAAH,OAAQC,KAAKC,SAAS,MACnC,EAAKT,SAAS,CACZb,OAAOiB,K,uDAKF,IAAD,OAEN,OADAR,QAAQC,IAAIa,KAAKxB,MAAMI,SAErB,oCAEA,kBAAC,EAAD,KACA,yBAAKX,IAAI,OAAOG,IAAK6B,MACrB,uBAAGzC,UAAU,QAAb,wCACA,wBAAIA,UAAU,SACd,qCAAWwC,KAAKxB,MAAME,OACtB,yCAAesB,KAAKxB,MAAMG,WAE5B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGqB,KAAKxB,MAAMC,OAAOyB,KAAI,SAAAzB,GAAM,OACxB,kBAAC,EAAD,CACCX,MAAO,EAAKe,UACXV,IAAKM,EAAOT,GACZA,GAAKS,EAAOT,GACZK,MAAOI,EAAOJ,MACdH,KAAMO,EAAOP,iB,GAjEViC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.6456606c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/title.d71fe94b.png\";","import React from \"react\";\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ScrubsCards(props){\n    return(\n        <div className=\"card\"  onClick={props.click}>\n            <div className=\"img-container\" >\n                <img  data-id={props.id} alt={props.name} key src={props.image}/>\n            </div>\n        </div>\n    )\n}\n\nexport default ScrubsCards;","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Jumbotron({children}){\n    return(\n    <div className=\"jumbotron\">\n        {children}\n    </div>\n    )\n}\n\nexport default Jumbotron;","import React, {Component} from 'react';\nimport Container from \"./components/Container\";\nimport Wrapper from \"./components/Wrapper\";\nimport ScrubsCards from \"./components/ScrubsCards\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport scrubs from './scrubs.json';\nimport title from \"./title.png\";\n\n\nclass App extends Component {\n  state ={\n    scrubs:scrubs,\n    score:0,\n    topScore:0,\n    clicked:[]\n  }\n  clickCard=event=>{\n    // console.log(\"card clicked\")\n    // console.log(event.target)\n    this.cardShuffle();\n    var id= event.target.getAttribute(\"data-id\");\n    console.log(id)\n    if(this.state.clicked.includes(id)){\n      console.log(\"you lose\")\n      alert(\"You clicked on the same image...you lose!\")\n      this.setState({\n        clicked: [],\n        score:0,\n      })\n    }else{\n      var copy = [...this.state.clicked]\n      copy.push(id)\n      if(copy.length === 12){\n        console.log(\"you won!\")\n        alert(\"HOORAY!! You have a great memory!\")\n      }else{\n      this.setState({\n        clicked: copy,\n        score: this.state.score+1,\n        topScore:(this.state.score +1>this.state.topScore) ? this.state.topScore+1 : this.state.topScore\n      })\n\n    }\n    }\n  }\n  cardShuffle= ()=>{\n    var scrubs2= [...this.state.scrubs]\n    scrubs2.sort((a,b)=> Math.random()-.5)\n    this.setState({\n      scrubs:scrubs2\n\n    })\n  }\n\n  render(){\n    console.log(this.state.clicked)\n    return(\n      <>\n        \n      <Jumbotron>\n      <img alt=\"logo\" src={title}></img>\n      <p className=\"lead\">Don't Click on the Same Image Twice!</p>\n      <hr className=\"my-4\"></hr>\n      <h3>Score:{this.state.score}</h3>\n      <h3>Top Score:{this.state.topScore}</h3>\n    </Jumbotron>\n    <Container>\n      <Wrapper >\n        {this.state.scrubs.map(scrubs=>(\n             <ScrubsCards\n              click={this.clickCard}\n               key={scrubs.id}\n               id= {scrubs.id}\n               image={scrubs.image}\n               name={scrubs.name}\n             />\n        ))}\n     \n      </Wrapper>\n      </Container>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}